#!/usr/bin/env python
"""
Script para verificar se todas as configura√ß√µes est√£o corretas
Execute este script antes do deploy para garantir que tudo est√° funcionando
"""

import os
import sys
import django
from pathlib import Path

# Adicionar o diret√≥rio do projeto ao path
BASE_DIR = Path(__file__).resolve().parent
sys.path.append(str(BASE_DIR))

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'LMFIT.settings')
django.setup()

from django.conf import settings
from django.db import connection
import requests

def verificar_variaveis_ambiente():
    """Verifica se todas as vari√°veis de ambiente est√£o definidas"""
    print("üîç VERIFICANDO VARI√ÅVEIS DE AMBIENTE")
    print("=" * 50)
    
    variaveis_obrigatorias = [
        'SECRET_KEY',
        'SUPABASE_URL',
        'SUPABASE_KEY', 
        'SUPABASE_SERVICE_KEY',
        'DATABASE_URL'
    ]
    
    todas_ok = True
    
    for var in variaveis_obrigatorias:
        valor = os.getenv(var)
        if valor:
            if var == 'SECRET_KEY':
                print(f"‚úÖ {var}: {'*' * 20}...{valor[-4:]}")
            elif 'KEY' in var or 'URL' in var:
                print(f"‚úÖ {var}: {valor[:30]}...")
            else:
                print(f"‚úÖ {var}: {valor}")
        else:
            print(f"‚ùå {var}: N√ÉO DEFINIDA")
            todas_ok = False
    
    print(f"\n{'‚úÖ TODAS AS VARI√ÅVEIS OK' if todas_ok else '‚ùå FALTAM VARI√ÅVEIS'}")
    return todas_ok

def verificar_conexao_banco():
    """Verifica se a conex√£o com o banco est√° funcionando"""
    print("\nüîç VERIFICANDO CONEX√ÉO COM BANCO")
    print("=" * 50)
    
    try:
        with connection.cursor() as cursor:
            cursor.execute("SELECT 1")
            resultado = cursor.fetchone()
            if resultado:
                print("‚úÖ Conex√£o com banco: OK")
                
                # Verificar se as tabelas existem
                cursor.execute("""
                    SELECT table_name 
                    FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    AND table_name IN ('loja_roupa', 'loja_adminuser')
                    ORDER BY table_name
                """)
                tabelas = cursor.fetchall()
                
                tabelas_encontradas = [t[0] for t in tabelas]
                print(f"‚úÖ Tabelas encontradas: {', '.join(tabelas_encontradas)}")
                
                if len(tabelas_encontradas) == 2:
                    print("‚úÖ Estrutura do banco: OK")
                    return True
                else:
                    print("‚ùå Faltam tabelas no banco")
                    return False
            else:
                print("‚ùå Conex√£o com banco: FALHOU")
                return False
                
    except Exception as e:
        print(f"‚ùå Erro na conex√£o: {e}")
        return False

def verificar_supabase_storage():
    """Verifica se o Supabase Storage est√° acess√≠vel"""
    print("\nüîç VERIFICANDO SUPABASE STORAGE")
    print("=" * 50)
    
    try:
        url = f"{settings.SUPABASE_URL}/storage/v1/bucket"
        headers = {
            'Authorization': f'Bearer {settings.SUPABASE_KEY}'
        }
        
        response = requests.get(url, headers=headers, timeout=10)
        
        if response.status_code == 200:
            buckets = response.json()
            bucket_names = [bucket.get('name', '') for bucket in buckets]
            
            print(f"‚úÖ Conex√£o com Supabase: OK")
            print(f"‚úÖ Buckets dispon√≠veis: {', '.join(bucket_names)}")
            
            if settings.SUPABASE_STORAGE_BUCKET in bucket_names:
                print(f"‚úÖ Bucket '{settings.SUPABASE_STORAGE_BUCKET}': ENCONTRADO")
                return True
            else:
                print(f"‚ùå Bucket '{settings.SUPABASE_STORAGE_BUCKET}': N√ÉO ENCONTRADO")
                return False
        else:
            print(f"‚ùå Erro na API do Supabase: {response.status_code}")
            print(f"   Resposta: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro na verifica√ß√£o: {e}")
        return False

def verificar_configuracoes_django():
    """Verifica configura√ß√µes do Django"""
    print("\nüîç VERIFICANDO CONFIGURA√á√ïES DJANGO")
    print("=" * 50)
    
    # Verificar DEBUG
    if settings.DEBUG:
        print("‚ö†Ô∏è  DEBUG: True (OK para desenvolvimento)")
    else:
        print("‚úÖ DEBUG: False (OK para produ√ß√£o)")
    
    # Verificar ALLOWED_HOSTS
    hosts = settings.ALLOWED_HOSTS
    print(f"‚úÖ ALLOWED_HOSTS: {hosts}")
    
    # Verificar STATIC_ROOT
    static_root = settings.STATIC_ROOT
    if static_root and Path(static_root).exists():
        print(f"‚úÖ STATIC_ROOT: {static_root} (existe)")
    else:
        print(f"‚ö†Ô∏è  STATIC_ROOT: {static_root} (n√£o existe ainda)")
    
    return True

def main():
    """Fun√ß√£o principal"""
    print("üöÄ VERIFICA√á√ÉO DE CONFIGURA√á√ÉO - LMFIT")
    print("=" * 60)
    
    resultados = []
    
    # Executar todas as verifica√ß√µes
    resultados.append(verificar_variaveis_ambiente())
    resultados.append(verificar_conexao_banco())
    resultados.append(verificar_supabase_storage())
    resultados.append(verificar_configuracoes_django())
    
    # Resultado final
    print("\n" + "=" * 60)
    print("üìä RESULTADO FINAL")
    print("=" * 60)
    
    if all(resultados):
        print("üéâ TODAS AS VERIFICA√á√ïES PASSARAM!")
        print("‚úÖ Seu projeto est√° pronto para o deploy!")
        return 0
    else:
        print("‚ùå ALGUMAS VERIFICA√á√ïES FALHARAM!")
        print("‚ö†Ô∏è  Corrija os problemas antes do deploy.")
        return 1

if __name__ == "__main__":
    sys.exit(main())
